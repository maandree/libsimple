.TH LIBSIMPLE_VALLOC 3 2018-11-03 libsimple
.SH NAME
libsimple_valloc \- allocate memory with page size alignment
.SH SYNOPSIS
.nf
#include <libsimple.h>

static inline void *libsimple_valloc(size_t \fIn\fP);
static inline void *libsimple_envalloc(int \fIstatus\fP, size_t \fIn\fP);
static inline void *libsimple_evalloc(size_t \fIn\fP);

#ifndef valloc
# define valloc libsimple_valloc
#endif
#ifndef envalloc
# define envalloc libsimple_envalloc
#endif
#ifndef evalloc
# define evalloc libsimple_evalloc
#endif
.fi
.PP
Link with
.IR \-lsimple .
.SH DESCRIPTION
The
.BR libsimple_valloc (),
.BR libsimple_envalloc (),
and
.BR libsimple_evalloc ()
functions allocate
.I n
uninitialised bytes to the heap and return a
pointer with an alignment of the page size
to the allocated memory. The function
.BR free (3)
shall be called with the returned pointer as
input when the allocated memory is no longer needed.
.PP
The
.BR libsimple_envalloc ()
and
.BR libsimple_evalloc ()
functions will terminate the process if the memory
cannot be allocated of if the user tries to allocate
0 bytes, by calling the
.BR libsimple_enprintf ()
and
.BR libsimple_eprintf ()
functions, respectively.
On failure, the process's exit value will be
.I status
if the
.BR libsimple_envalloc ()
function is used or
.IR libsimple_default_failure_exit (3)
if the
.BR libsimple_evalloc ()
function is used.
.SH RETURN VALUE
The
.BR libsimple_valloc (),
.BR libsimple_envalloc (),
and
.BR libsimple_evalloc ()
functions return a pointer to the allocated memory
upon success completion; otherwise the
.BR libsimple_valloc ()
function return
.B NULL
and set
.I errno
it indicate the error, and the
.BR libsimple_envalloc ()
and
.BR libsimple_evalloc ()
functions terminated the process.
.SH ERRORS
The
.BR libsimple_valloc ()
function will fail if:
.TP
.B EINVAL
.I n
is 0.
.TP
.B ENOMEM
Enough memory could not be allocated.
.PP
The
.BR libsimple_envalloc ()
and
.BR libsimple_evalloc ()
functions will terminate the process on failure.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR libsimple_valloc (),
.br
.BR libsimple_envalloc (),
.br
.BR libsimple_evalloc ()
T}	Thread safety	MT-Safe
T{
.BR libsimple_valloc (),
.br
.BR libsimple_envalloc (),
.br
.BR libsimple_evalloc ()
T}	Async-signal safety	AS-Safe
T{
.BR libsimple_valloc (),
.br
.BR libsimple_envalloc (),
.br
.BR libsimple_evalloc ()
T}	Async-cancel safety	AC-Safe
.TE
.SH EXAMPLES
None.
.SH APPLICATION USAGE
None.
.SH RATIONALE
None.
.SH FUTURE DIRECTIONS
None.
.SH NOTES
The GNU implementation of
.BR valloc (3)
is \(dqMT-Unsafe init\(dq.
.SH BUGS
None.
.SH SEE ALSO
.BR libsimple_enmalloc (3),
.BR libsimple_mallocz (3),
.BR libsimple_vmallocn (3),
.BR libsimple_vmalloczn (3),
.BR libsimple_encalloc (3),
.BR libsimple_vcallocn (3),
.BR libsimple_enrealloc (3),
.BR libsimple_vreallocn (3),
.BR libsimple_memalign (3),
.BR libsimple_memalignz (3),
.BR libsimple_vmemalignn (3),
.BR libsimple_vmemalignzn (3),
.BR libsimple_enposix_memalign (3),
.BR libsimple_posix_memalignz (3),
.BR libsimple_vposix_memalignn (3),
.BR libsimple_vposix_memalignzn (3),
.BR libsimple_enaligned_alloc (3),
.BR libsimple_aligned_allocz (3),
.BR libsimple_valigned_allocn (3),
.BR libsimple_valigned_alloczn (3),
.BR libsimple_pvalloc (3),
.BR libsimple_pvallocz (3),
.BR libsimple_vpvallocn (3),
.BR libsimple_vpvalloczn (3),
.BR libsimple_vallocz (3),
.BR libsimple_vvallocn (3),
.BR libsimple_vvalloczn (3),
.BR libsimple_vmemalloc (3),
.BR libsimple_varrayalloc (3)
