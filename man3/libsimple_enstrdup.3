.TH LIBSIMPLE_ENSTRDUP 3 libsimple
.SH NAME
libsimple_enstrdup, libsimple_strdupa \- duplicate a string

.SH SYNOPSIS
.nf
#include <libsimple.h>

char *libsimple_strdupa(const char *\fIs\fP);
char *libsimple_enstrdup(int \fIstatus\fP, const char *\fIs\fP);
static inline char *libsimple_estrdup(const char *\fIs\fP);

#ifndef strdupa
# define strdupa libsimple_strdupa
#endif
#ifndef enstrdup
# define enstrdup libsimple_enstrdup
#endif
#ifndef estrdup
# define estrdup libsimple_estrdup
#endif
.fi
.PP
Link with
.IR \-lsimple .

.SH DESCRIPTION
The
.BR libsimple_enstrdup ()
and
.BR libsimple_estrdup ()
functions are versions of the
.BR strdup (3)
function that call the
.BR libsimple_enprintf (3)
function on failure, causing the process to print
an error message and exit. See
.BR libsimple_enprintf (3)
for more information.
.PP
The
.BR libsimple_strdupa ()
function is implemented as a macro and is a version
of the
.BR strdup (3)
function that uses allocates the memory on the stack
rather than on the heap, causing the return pointer
to become invalid when the calling function returns.
It is only available when compling with GCC or Clang.

.SH RETURN VALUE
Upon successful completion, the
.BR libsimple_strdupa (),
.BR libsimple_enstrdup (),
and
.BR libsimple_estrdup ()
functions return a non-null pointer, on failure the
.BR libsimple_enstrdup (),
and
.BR libsimple_estrdup ()
functions exit the process. The
.BR libsimple_strdupa ()
function cannot fail, however the kernel
can kill the thread, and possibly the process, with a
.B SIGSEGV
signal if the memory cannot be allocated.
.PP
The returned pointer should be deallocated when it
is no longer needed, except for the pointer returned
by the
.BR libsimple_strdupa ()
function, it is automatically deallocated when the
calling function returns.

.SH ERRORS
None.

.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR libsimple_strdupa (),
.br
.BR libsimple_enstrdup (),
.br
.BR libsimple_estrdup (),
T}	Thread safety	MT-Safe
T{
.BR libsimple_strdupa (),
.br
.BR libsimple_enstrdup (),
.br
.BR libsimple_estrdup (),
T}	Async-signal safety	AS-Safe
T{
.BR libsimple_strdupa (),
.br
.BR libsimple_enstrdup (),
.br
.BR libsimple_estrdup (),
T}	Async-cancel safety	AC-Safe
.TE

.SH EXAMPLES
None.

.SH APPLICATION USAGE
None.

.SH RATIONALE
None.

.SH FUTURE DIRECTIONS
None.

.SH NOTES
None.

.SH BUGS
None.

.SH SEE ALSO
.BR libsimple_aligned_strdup (3),
.BR libsimple_enstrndup (3),
.BR libsimple_memdup (3),
.BR libsimple_enwcsdup (3),
.BR libsimple_wcsndup (3),
.BR libsimple_wmemdup (3),
.BR strndup (3),
.BR strdup (3),
.BR wcsdup (3)
