.TH LIBSIMPLE_VALIGNED_REALLOCN 3 2018-11-28 libsimple
.SH NAME
libsimple_valigned_reallocn \- reallocate memory and customise alignment
.SH SYNOPSIS
.nf
#include <libsimple.h>

void *libsimple_valigned_reallocn(void *\fIptr\fP, size_t \fIalignment\fP, size_t \fIn\fP, va_list \fIap\fP);
void *libsimple_envaligned_reallocn(int \fIstatus\fP, void *\fIptr\fP, size_t \fIalignment\fP, size_t \fIn\fP, va_list \fIap\fP);
static inline void *libsimple_evaligned_reallocn(void *\fIptr\fP, size_t \fIalignment\fP, size_t \fIn\fP, va_list \fIap\fP);
static inline void *libsimple_aligned_reallocn(void *\fIptr\fP, size_t \fIalignment\fP, size_t \fIn\fP, ..., /* (size_t)0 */);
static inline void *libsimple_enaligned_reallocn(int \fIstatus\fP, void *\fIptr\fP, size_t \fIalignment\fP, size_t \fIn\fP, ..., /* (size_t)0 */);
static inline void *libsimple_ealigned_reallocn(void *\fIptr\fP, size_t \fIalignment\fP, size_t \fIn\fP, ..., /* (size_t)0 */);

#ifndef valigned_reallocn
# define valigned_reallocn libsimple_valigned_reallocn
#endif
#ifndef envaligned_reallocn
# define envaligned_reallocn libsimple_envaligned_reallocn
#endif
#ifndef evaligned_reallocn
# define evaligned_reallocn libsimple_evaligned_reallocn
#endif
#ifndef aligned_reallocn
# define aligned_reallocn libsimple_aligned_reallocn
#endif
#ifndef enaligned_reallocn
# define enaligned_reallocn libsimple_enaligned_reallocn
#endif
#ifndef ealigned_reallocn
# define ealigned_reallocn libsimple_ealigned_reallocn
#endif
.fi
.PP
Link with
.IR \-lsimple .
.SH DESCRIPTION
The
.BR libsimple_aligned_reallocn (),
.BR libsimple_enaligned_reallocn (),
and
.BR libsimple_ealigned_reallocn ()
functions are wrappers for the
.BR realloc (3)
function, they reallocate memory allocated on
the heap and return the older pointer or a new
pointer with the alignment of
.I alignment
to the allocated memory of 
.I N
bytes, where
.I N
is the product of
.I n
and all following arguments (which should have the type
.BR size_t )
up to the first 0;
.I n
must not be 0. The returned pointer will contain the
same content as
.IR ptr ,
but truncated to
.I N
bytes if it is smaller or with the new bytes
unitialised if it is larger. If a new pointer
is returned, rather than
.IR ptr ,
.I ptr
is deallocated;
.I ptr
is not deallocated on failure. The function
.BR free (3)
shall be called with the returned pointer as
input when the allocated memory is no longer needed.
.PP
The
.BR libsimple_enaligned_reallocn ()
and
.BR libsimple_ealigned_reallocn ()
functions will terminate the process if the memory
cannot be allocated, by calling the
.BR libsimple_enprintf ()
and
.BR libsimple_eprintf ()
functions, respectively.
On failure, the process's exit value will be
.I status
if the
.BR libsimple_enaligned_reallocn ()
function is used or
.IR libsimple_default_failure_exit (3)
if the
.BR libsimple_ealigned_reallocn ()
function is used.
.PP
The
.BR libsimple_valigned_reallocn (),
.BR libsimple_envaligned_reallocn (),
and
.BR libsimple_evaligned_reallocn ()
functions are versions of the
.BR libsimple_aligned_reallocn (),
.BR libsimple_enaligned_reallocn (),
and
.BR libsimple_ealigned_reallocn (),
respectively, that use
.B va_list
instead of variadic arguments.
.SH RETURN VALUE
The
.BR libsimple_valigned_reallocn (),
.BR libsimple_envaligned_reallocn (),
.BR libsimple_evaligned_reallocn (),
.BR libsimple_aligned_reallocn (),
.BR libsimple_enaligned_reallocn (),
and
.BR libsimple_ealigned_reallocn ()
functions return a pointer to the allocated memory
upon success completion; otherwise the
.BR libsimple_valigned_reallocn ()
and
.BR libsimple_aligned_reallocn ()
functions return
.B NULL
and set
.I errno
it indicate the error, and the
.BR libsimple_envaligned_reallocn (),
.BR libsimple_evaligned_reallocn (),
.BR libsimple_enaligned_reallocn (),
and
.BR libsimple_ealigned_reallocn ()
functions terminated the process.
.SH ERRORS
The
.BR libsimple_valigned_reallocn ()
and
.BR libsimple_aligned_reallocn ()
functions will fail for the reasons specified for the
.BR realloc (3)
function, and if:
.TP
.B EINVAL
.I n
is 0.
.TP
.B EINVAL
.I alignment
is an invalid alignment (usually it needs to be an power of 2).
.TP
.B ENOSYS
The function is not implemented. The function requires
non-standard libc functions, and is therefore not supported
for all libc implementations.

The function is implemented if and only if the macro
.B LIBSIMPLE_HAVE_ALIGNED_REALLOC
is defined by the library.
.PP
The
.BR libsimple_envaligned_reallocn (),
.BR libsimple_evaligned_reallocn (),
.BR libsimple_enaligned_reallocn (),
and
.BR libsimple_ealigned_reallocn ()
functions will terminate the process on failure.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR libsimple_valigned_reallocn (),
.br
.BR libsimple_envaligned_reallocn (),
.br
.BR libsimple_evaligned_reallocn (),
.br
.BR libsimple_aligned_reallocn (),
.br
.BR libsimple_enaligned_reallocn (),
.br
.BR libsimple_ealigned_reallocn ()
T}	Thread safety	MT-Safe
T{
.BR libsimple_valigned_reallocn (),
.br
.BR libsimple_envaligned_reallocn (),
.br
.BR libsimple_evaligned_reallocn (),
.br
.BR libsimple_aligned_reallocn (),
.br
.BR libsimple_enaligned_reallocn (),
.br
.BR libsimple_ealigned_reallocn ()
T}	Async-signal safety	AS-Safe
T{
.BR libsimple_valigned_reallocn (),
.br
.BR libsimple_envaligned_reallocn (),
.br
.BR libsimple_evaligned_reallocn (),
.br
.BR libsimple_aligned_reallocn (),
.br
.BR libsimple_enaligned_reallocn (),
.br
.BR libsimple_ealigned_reallocn ()
T}	Async-cancel safety	AC-Safe
.TE
.SH EXAMPLES
None.
.SH APPLICATION USAGE
None.
.SH RATIONALE
None.
.SH FUTURE DIRECTIONS
None.
.SH NOTES
None.
.SH BUGS
None.
.SH SEE ALSO
.BR libsimple_enmalloc (3),
.BR libsimple_mallocz (3),
.BR libsimple_vmallocn (3),
.BR libsimple_vmalloczn (3),
.BR libsimple_encalloc (3),
.BR libsimple_vcallocn (3),
.BR libsimple_enrealloc (3),
.BR libsimple_reallocarray (3),
.BR libsimple_vreallocn (3),
.BR libsimple_reallocf (3),
.BR libsimple_reallocarrayf (3),
.BR libsimple_vreallocfn (3),
.BR libsimple_aligned_realloc (3),
.BR libsimple_aligned_reallocarray (3),
.BR libsimple_aligned_reallocf (3),
.BR libsimple_aligned_reallocarrayf (3),
.BR libsimple_aligned_vreallocfn (3),
.BR libsimple_memalign (3),
.BR libsimple_memalignz (3),
.BR libsimple_vmemalignn (3),
.BR libsimple_vmemalignzn (3),
.BR libsimple_enposix_memalign (3),
.BR libsimple_posix_memalignz (3),
.BR libsimple_vposix_memalignn (3),
.BR libsimple_vposix_memalignzn (3),
.BR libsimple_enaligned_alloc (3),
.BR libsimple_aligned_allocz (3),
.BR libsimple_valigned_allocn (3),
.BR libsimple_valigned_alloczn (3),
.BR libsimple_pvalloc (3),
.BR libsimple_pvallocz (3),
.BR libsimple_vpvallocn (3),
.BR libsimple_vpvalloczn (3),
.BR libsimple_valloc (3),
.BR libsimple_vallocz (3),
.BR libsimple_vvallocn (3),
.BR libsimple_vvalloczn (3),
.BR libsimple_vmemalloc (3),
.BR libsimple_varrayalloc (3),
.BR malloc (3)
