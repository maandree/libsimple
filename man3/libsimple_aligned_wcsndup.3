.TH LIBSIMPLE_ALIGNED_WCSNDUP 3 libsimple
.SH NAME
libsimple_aligned_wcsndup, libsimple_aligned_wcsndupa \- duplicate a wide-character string

.SH SYNOPSIS
.nf
#include <libsimple.h>

wchar_t *libsimple_aligned_wcsndupa(const wchar_t *\fIs\fP, size_t \fIalignment\fP, size_t \fIn\fP);
wchar_t *libsimple_aligned_wcsndup(const wchar_t *\fIs\fP, size_t \fIalignment\fP, size_t \fIn\fP);
wchar_t *libsimple_enaligned_wcsndup(int \fIstatus\fP, const wchar_t *\fIs\fP, size_t \fIalignment\fP, size_t \fIn\fP);
inline wchar_t *libsimple_ealigned_wcsndup(const wchar_t *\fIs\fP, size_t \fIalignment\fP, size_t \fIn\fP);

#ifndef aligned_wcsndupa
# define aligned_wcsndupa libsimple_aligned_wcsndupa
#endif
#ifndef aligned_wcsndup
# define aligned_wcsndup libsimple_aligned_wcsndup
#endif
#ifndef enaligned_wcsndup
# define enaligned_wcsndup libsimple_enaligned_wcsndup
#endif
#ifndef ealigned_wcsndup
# define ealigned_wcsndup libsimple_ealigned_wcsndup
#endif
.fi
.PP
Link with
.IR \-lsimple .

.SH DESCRIPTION
The
.BR libsimple_aligned_wcsndup ()
function allocates memory with the alignment
specified in the
.I alignment
parameter and copies the wide-character string
.I s
into the new allocation, up to the
.IR n th
wide character
.RB ( wchar_t ).
A NUL wide-character will always be written
to the end of the new string.
.PP
The
.BR libsimple_enaligned_wcsndup ()
and
.BR libsimple_ealigned_wcsndup ()
functions are versions of the
.BR libsimple_aligned_wcsndup ()
function that call the
.BR libsimple_enprintf (3)
function on failure, causing the process to print
an error message and exit. See
.BR libsimple_enprintf (3)
for more information.
.PP
The
.BR libsimple_wcsndupa ()
function is implemented as a macro and is a version
of the
.BR libsimple_wcsndup ()
function that uses allocates the memory on the stack
rather than on the heap, causing the return pointer
to become invalid when the calling function returns.
It is only available when compling with GCC or Clang.

.SH RETURN VALUE
Upon successful completion, the
.BR libsimple_aligned_wcsndupa (),
.BR libsimple_aligned_wcsndup (),
.BR libsimple_enaligned_wcsndup (),
and
.BR libsimple_ealigned_wcsndup ()
functions return a non-null pointer, on failure the
.BR libsimple_aligned_wcsndup ()
function returns
.B NULL
and set
.I errno
to indicate the error, and the
.BR libsimple_enaligned_wcsndup (),
and
.BR libsimple_ealigned_wcsndup ()
functions exit the process. The
.BR libsimple_aligned_wcsndupa ()
function cannot fail, however the kernel
can kill the thread, and possibly the process, with a
.B SIGSEGV
signal if the memory cannot be allocated.
.PP
The returned pointer should be deallocated when it
is no longer needed, except for the pointer returned
by the
.BR libsimple_aligned_wcsndupa ()
function, it is automatically deallocated when the
calling function returns.

.SH ERRORS
The
.BR libsimple_aligned_wcsndup ()
function may fail for any reason specified for the
.BR aligned_alloc (3)
function.

.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.TS
allbox;
lb lb lb
l l l.
Interface	Attribute	Value
T{
.BR libsimple_aligned_wcsndupa (),
.br
.BR libsimple_aligned_wcsndup (),
.br
.BR libsimple_enaligned_wcsndup (),
.br
.BR libsimple_ealigned_wcsndup (),
T}	Thread safety	MT-Safe
T{
.BR libsimple_aligned_wcsndupa (),
.br
.BR libsimple_aligned_wcsndup (),
.br
.BR libsimple_enaligned_wcsndup (),
.br
.BR libsimple_ealigned_wcsndup (),
T}	Async-signal safety	AS-Safe
T{
.BR libsimple_aligned_wcsndupa (),
.br
.BR libsimple_aligned_wcsndup (),
.br
.BR libsimple_enaligned_wcsndup (),
.br
.BR libsimple_ealigned_wcsndup (),
T}	Async-cancel safety	AC-Safe
.TE

.SH EXAMPLES
None.

.SH APPLICATION USAGE
None.

.SH RATIONALE
None.

.SH FUTURE DIRECTIONS
None.

.SH NOTES
None.

.SH HISTORY
libsimple 1.2

.SH BUGS
None.

.SH SEE ALSO
.BR libsimple_wcsndup (3),
.BR libsimple_aligned_strndup (3),
.BR libsimple_aligned_strdup (3),
.BR libsimple_aligned_memdup (3),
.BR libsimple_aligned_wcsdup (3),
.BR libsimple_aligned_wmemdup (3)
